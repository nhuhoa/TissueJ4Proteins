nodes_df$clone_desc <- 'unlabeled'
nbcores <- 4
labels <- parallel::mclapply(1:dim(nodes_df)[1], function(i) {
clone_label <- get_clone_label(nodes_df[i,'C1_BFP_mean_corerage'], nodes_df[i,'C2_tSapphire_mean_corerage'],
nodes_df[i,'C3_Venus_mean_corerage'], nodes_df[i,'C4_Tomato_mean_corerage'],
nodes_df[i,'C5_Katushka_mean_corerage'])
return(clone_label)
}, mc.cores = nbcores)
nodes_df$cluster_label <- unlist(labels)
# for(i in 1:dim(nodes_df)[1]){
#   # get_clone_label(e, ts, v, td, k) ##c('eBFP2','tSapphire','Venus','tdTomato','Katushka')
#   res <- get_clone_label(nodes_df[i,'C1_BFP_mean_corerage'], nodes_df[i,'C2_tSapphire_mean_corerage'],
#                          nodes_df[i,'C3_Venus_mean_corerage'], nodes_df[i,'C4_Tomato_mean_corerage'],
#                          nodes_df[i,'C5_Katushka_mean_corerage'])
#   nodes_df[i,'cluster_label'] <- res$clone_label
#   nodes_df[i,'clone_desc'] <- res$clone_desc
# }
print(summary(as.factor(nodes_df$cluster_label)))
# data.table::fwrite(nodes_df, paste0(save_dir, datatag,'_nodes_allcells.csv'))
# nodes_df <- data.table::fread(paste0(save_dir, datatag,'_nodes_allcells.csv')) %>% as.data.frame()
nodes_df$cell_id <- paste0('V',nodes_df$cell_id)
nodes_df <- nodes_df %>%
dplyr::filter(cluster_label!='Clone_0')  # 0 is unlabelled cells
print(dim(nodes_df))
if(save_data){
data.table::fwrite(nodes_df, paste0(save_dir, datatag,'_nodes_ct.csv.gz'))
}
return(nodes_df)
}
# save_dir <- paste0(input_dir,'testing_cell_type/CT/')
# nodes_df <- data.table::fread(paste0(save_dir,datatag,'_nodes.csv')) %>% as.data.frame()
# edges_df <- data.table::fread(paste0(save_dir,datatag,'_edges.csv')) %>% as.data.frame()
# head(edges_df)
get_celltype <- function(nodes_df, edges_df,
save_dir, datatag,
save_data=T, thres_vol_marker=0.2){
if(!file.exists(save_dir)){
file.create(save_dir)
}
thrsBFP <- 20
thrstSapphire <- 50
thrsVenus <- 50
thrsTomato <- 70
thrsKatushka <- 20
# summary(nodes_df$C5_Katushka_mean_intensity)
nodes_df$C1_BFP_mean_corerage <- ifelse(nodes_df$C1_BFP_mean_corerage>=thres_vol_marker &
nodes_df$C1_BFP_mean_intensity>thrsBFP,1,0)
nodes_df$C2_tSapphire_mean_corerage <- ifelse(nodes_df$C2_tSapphire_mean_corerage>=thres_vol_marker &
nodes_df$C2_tSapphire_mean_intensity>thrstSapphire
,1,0)
nodes_df$C3_Venus_mean_corerage <- ifelse(nodes_df$C3_Venus_mean_corerage>=thres_vol_marker &
nodes_df$C3_Venus_mean_intensity>thrsVenus,1,0)
nodes_df$C4_Tomato_mean_corerage <- ifelse(nodes_df$C4_Tomato_mean_corerage>=thres_vol_marker &
nodes_df$C4_Tomato_mean_intensity>thrsTomato,1,0)
nodes_df$C5_Katushka_mean_corerage <- ifelse(nodes_df$C5_Katushka_mean_corerage>=thres_vol_marker &
nodes_df$C5_Katushka_mean_intensity>thrsKatushka,1,0)
# nodes_backup <- nodes_df
# nodes_df <- nodes_backup
nodes_df$cluster_label <- 'unlabeled'
nodes_df$clone_desc <- 'unlabeled'
nbcores <- 8
labels <- parallel::mclapply(1:dim(nodes_df)[1], function(i) {
clone_label <- get_clone_label(nodes_df[i,'C1_BFP_mean_corerage'], nodes_df[i,'C2_tSapphire_mean_corerage'],
nodes_df[i,'C3_Venus_mean_corerage'], nodes_df[i,'C4_Tomato_mean_corerage'],
nodes_df[i,'C5_Katushka_mean_corerage'])
return(clone_label)
}, mc.cores = nbcores)
nodes_df$cluster_label <- unlist(labels)
# for(i in 1:dim(nodes_df)[1]){
#   # get_clone_label(e, ts, v, td, k) ##c('eBFP2','tSapphire','Venus','tdTomato','Katushka')
#   res <- get_clone_label(nodes_df[i,'C1_BFP_mean_corerage'], nodes_df[i,'C2_tSapphire_mean_corerage'],
#                          nodes_df[i,'C3_Venus_mean_corerage'], nodes_df[i,'C4_Tomato_mean_corerage'],
#                          nodes_df[i,'C5_Katushka_mean_corerage'])
#   nodes_df[i,'cluster_label'] <- res$clone_label
#   nodes_df[i,'clone_desc'] <- res$clone_desc
# }
print(summary(as.factor(nodes_df$cluster_label)))
# data.table::fwrite(nodes_df, paste0(save_dir, datatag,'_nodes_allcells.csv'))
# nodes_df <- data.table::fread(paste0(save_dir, datatag,'_nodes_allcells.csv')) %>% as.data.frame()
nodes_df$cell_id <- paste0('V',nodes_df$cell_id)
nodes_df <- nodes_df %>%
dplyr::filter(cluster_label!='Clone_0')  # 0 is unlabelled cells
print(dim(nodes_df))
edges_df$from <- paste0('V',edges_df$from)
edges_df$to <- paste0('V',edges_df$to)
edges_df <- edges_df %>%
dplyr::filter(from %in% nodes_df$cell_id & to %in% nodes_df$cell_id)
dim(edges_df)
res <- list(nodes=nodes_df, edges=edges_df)
if(save_data){
data.table::fwrite(nodes_df, paste0(save_dir, datatag,'_nodes_ct.csv.gz'))
data.table::fwrite(edges_df, paste0(save_dir, datatag,'_edges_ct.csv.gz'))
}
return(res)
}
get_cell_type_v3 <- function(nodes_df, edges_df,
save_dir, datatag,
save_data=T, thres_vol_marker=15){
if(!file.exists(save_dir)){
file.create(save_dir)
}
# BFP: 8/5
# Sapphire: 20/10
# Venus : 13/10
# Tomato: 13/10
# Katushka: 13/10
thrsBFP <- 5
thrstSapphire <- 10
thrsVenus <- 10
thrsTomato <- 10
thrsKatushka <- 10
# summary(nodes_df$C5_Katushka_mean_intensity)
colnames(nodes_df) <- gsub('-','_',colnames(nodes_df))
# C1_BFP_mean_coverage
# summary(nodes_df$`C1-BFP_pct_coverage`)
nodes_df <- nodes_df %>%
mutate(
C1_BFP_status = case_when(
(C1_BFP_pct_coverage >= thres_vol_marker) & (C1_BFP_mean_intensity_nuc >= thrsBFP) ~ 1,
TRUE ~ 0
),
C2_tSapphire_status = case_when(
(C2_tSapphire_pct_coverage >= thres_vol_marker) & (C2_tSapphire_mean_intensity_nuc >= thrstSapphire) ~ 1,
TRUE ~ 0
),
C3_venus_status = case_when(
(C3_venus_pct_coverage >= thres_vol_marker) & (C3_venus_mean_intensity_nuc >= thrsVenus) ~ 1,
TRUE ~ 0
),
C4_tomato_status = case_when(
(C4_tomato_pct_coverage >= thres_vol_marker) & (C4_tomato_mean_intensity_nuc >= thrsTomato) ~ 1,
TRUE ~ 0
),
C5_katushka_status = case_when(
(C5_katushka_pct_coverage >= thres_vol_marker) & (C5_katushka_mean_intensity_nuc >= thrsKatushka) ~ 1,
TRUE ~ 0
)
)
# summary(as.factor(nodes_df$C1_BFP_status))
# summary(as.factor(nodes_df$C2_tSapphire_status))
# summary(as.factor(nodes_df$C3_venus_status))
# summary(as.factor(nodes_df$C4_tomato_status))
# summary(as.factor(nodes_df$C5_katushka_status))
nodes_df$cluster_label <- 'unlabeled'
nodes_df$clone_desc <- 'unlabeled'
nbcores <- 12
labels <- parallel::mclapply(1:dim(nodes_df)[1], function(i) {
clone_label <- get_clone_label(nodes_df[i,'C1_BFP_status'],
nodes_df[i,'C2_tSapphire_status'],
nodes_df[i,'C3_venus_status'],
nodes_df[i,'C4_tomato_status'],
nodes_df[i,'C5_katushka_status'])
return(clone_label)
}, mc.cores = nbcores)
nodes_df$cluster_label <- unlist(labels)
print(summary(as.factor(nodes_df$cluster_label)))
dim(nodes_df)
excluded_cols <- c('C1_BFP_status','C2_tSapphire_status','C3_venus_status',
'C4_tomato_status', 'C5_katushka_status')
nodes_df <- nodes_df %>%
dplyr::select(-all_of(excluded_cols))
data.table::fwrite(nodes_df, paste0(save_dir,'filtered_cell_profiles.csv.gz'))
}
# annotate_prob=0.85: if a sub population with more cells than others in 0.85 quantile --> shown
# xmax: width of image
# ymax: height of image
viz_downsample_phenotype_v2 <- function(df, meta_clones,
xmax, ymax,col=NULL,
annotate_prob=0.85
){
library(ggplot2)
library(ggrepel)
df <- df %>% inner_join(meta_clones, by=c('celltype'='clone_id'))
if(is.null(col)){
# cts <- gtools::mixedsort(unique(df$celltype))
# meta_clones <- data.table::fread(paste0(script_dir,'predefined_clones_v2.csv')) %>% as.data.frame()
meta_clones <- meta_clones %>%
dplyr::filter(clone_id %in% unique(df$celltype))
col <- meta_clones$cluster_color
names(col) <- meta_clones$clone_id
# nbcelltypes <- length(cts)
# col <- colorRampPalette(brewer.pal(8, "Set2"))(nbcelltypes)
# names(col) <- cts
}
df <- df %>%
dplyr::filter(node_size>1)
dim(df)
df$node_size
# df$nb_cells <- round(log2(sample(10:1000, dim(df)[1])),2)
df_annotated <- df
summary(df_annotated$node_size)
df_annotated <- df_annotated %>%
dplyr::filter(node_size>quantile(df_annotated$node_size,probs=annotate_prob))
dim(df_annotated)
df$ct <- gsub('Clone_','',df$celltype)
df$y <- ymax - df$y
p <- ggplot(df, aes(x = x, y = y)) +
geom_point(aes(color = celltype, size=log2(node_size))) +
# geom_text(aes(label=celltype_desc))+
annotate('text', x = df$x, y = df$y,
label = df$ct, size=2)+
scale_color_manual(values = col) +
theme_bw(base_size = 12) +
theme(legend.position = "bottom",
legend.box = "vertical",
panel.grid = element_blank(),
axis.ticks = element_blank(),
axis.text  = element_blank(),
axis.title = element_blank()) +
geom_text_repel( data = df_annotated, aes(label = clone_desc), max.overlaps = Inf,
size = 3.5, box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines"),
min.segment.length = 0) +
guides(color = FALSE,size=guide_legend(title="log2(cell counts)"))
# p
png(paste0(save_dir,"summary_population.png"), height = ymax+100, width=xmax,res = 2*72)
print(p)
dev.off()
return(p)
}
get_edges_nodes_from_igraph <- function(g){
library(igraph)
if(is.null(V(g)$name)){
g <- g %>%
set_vertex_attr("name", value = paste0('V',rep(1:length(V(g)),1)))
}
edges <- igraph::as_data_frame(g, what="edges")
# edges = get.edgelist(g) %>% as.data.frame()
# colnames(edges) <- c('from','to')
print(head(edges))
nodes_df <- igraph::as_data_frame(g, what = c("vertices"))
print(head(nodes_df))
print(colnames(nodes_df))
print(dim(nodes_df))
return(list(nodes=nodes_df, edges=edges))
}
# script_dir <- '/Users/hoatran/Documents/jean_project/data/script/'
# meta_clones <- get_reference_clones(script_dir)
# meta_clones$cluster_color <- get_color_clone(meta_clones$clone_desc)
# data.table::fwrite(meta_clones, paste0(script_dir,'predefined_clones_v2.csv'))
# meta_clones <- data.table::fread(paste0(script_dir,'predefined_clones_v2.csv')) %>% as.data.frame()
# get_reference_clones <- function(save_dir){
#   markers <- c('eBFP2','tSapphire','Venus','tdTomato','Katushka') # Protein channel
#   vals <- c(0,1)
#   ls_clones <- list()
#   for(e in vals){
#     for(ts in vals){
#       for(v in vals){
#         for(td in vals){
#           for(k in vals){
#             lb <- ''
#             s <- 0
#             if(e==1){
#               lb <- paste0(lb, markers[1])
#               s <- s + 2^0
#             }
#             if(ts==1){
#               lb <- paste0(lb,', ',markers[2])
#               s <- s + 2^1
#             }
#             if(v==1){
#               lb <- paste0(lb,', ',markers[3])
#               s <- s + 2^2
#             }
#             if(td==1){
#               lb <- paste0(lb,', ',markers[4])
#               s <- s + 2^3
#             }
#             if(k==1){
#               lb <- paste0(lb,', ',markers[5])
#               s <- s + 2^4
#             }
#             # if(grepl('^, ', lb)){
#             #   lb <- str_sub(lb, 3, str_length(lb))
#             # }
#             ls_clones[[paste0('Clone_',s)]] <- lb
#           }
#         }
#       }
#     }
#   }
#   clone_df <- data.frame(clone_desc=unlist(ls_clones), clone_id=names(ls_clones))
#   clone_df <- clone_df %>%
#     dplyr::filter(clone_id!='Clone_0')
#   clone_df$clone_desc <- gsub('^, ','',clone_df$clone_desc)
#   # View(clone_df)
#   clone_df <- clone_df[gtools::mixedsort(clone_df$clone_id),]
#   data.table::fwrite(clone_df, paste0(save_dir,'predefined_clones.csv'))
#   return(clone_df)
# }
get_color_clone <- function(clones){
col <- c("eBFP2"="#fbeb14",
"tSapphire"="#e32636",
"eBFP2, tSapphire"="#7fbf7f",
"Venus"="#008040",
"eBFP2, Venus"="#c06000",
"tSapphire, Venus"="#cc99a2",
"eBFP2, tSapphire, Venus"="#ffc0cb",
"tdTomato"="#408000",
"eBFP2, tdTomato"="#b266b2",
"tSapphire, tdTomato" ="#ffc04c",
"eBFP2, tSapphire, tdTomato"="#ff6666",
"Venus, tdTomato"="#198c19",
"eBFP2, Venus, tdTomato"="#7f7fff",
"tSapphire, Venus, tdTomato"="#ffe4b2",
"eBFP2, tSapphire, Venus, tdTomato"="#540a87",
"Katushka"="#e31f50",
"eBFP2, Katushka"="#af9210",
"tSapphire, Katushka"="#7a660b",
"eBFP2, tSapphire, Katushka"="#463a06",
"Venus, Katushka"="#d7c887",
"eBFP2, Venus, Katushka"="#8fe73e",
"tSapphire, Venus, Katushka"="#57617",
"eBFP2, tSapphire, Venus, Katushka"="#db9eeb",
"tdTomato, Katushka"="#400f4d",
"eBFP2, tdTomato, Katushka"="#73c8da",
"tSapphire, tdTomato, Katushka"="#9e1209",
"eBFP2, tSapphire, tdTomato, Katushka"="#84ed7c",
"Venus, tdTomato, Katushka"="#eb9710",
"eBFP2, Venus, tdTomato, Katushka"="#9e6317",
"tSapphire, Venus, tdTomato, Katushka"="#07a70b",
"eBFP2, tSapphire, Venus, tdTomato, Katushka"="#1109d8")
return(col[clones])
}
# sce <- readRDS('~/Downloads/SA535_clonealign/SA535X10XB03693.rds')
# dim(sce)
# sce$ml_params
get_reference_clones <- function(meta_clones_fn=''){
# meta_clones_fn <- paste0(save_dir,'predefined_clones_v2.csv')
if(file.exists(meta_clones_fn)){  #predefined clones labels
clone_df <- data.table::fread(meta_clones_fn) %>% as.data.frame()
print(dim(clone_df))
return(clone_df)
}else{# if do not exist predefined clones labels, define it here
markers <- c('eBFP2','tSapphire','Venus','tdTomato','Katushka') # Protein channel
vals <- c(0,1)
ls_clones <- list()
for(e in vals){
for(ts in vals){
for(v in vals){
for(td in vals){
for(k in vals){
lb <- ''
s <- 0
if(e==1){
lb <- paste0(lb, markers[1])
s <- s + 2^0
}
if(ts==1){
lb <- paste0(lb,', ',markers[2])
s <- s + 2^1
}
if(v==1){
lb <- paste0(lb,', ',markers[3])
s <- s + 2^2
}
if(td==1){
lb <- paste0(lb,', ',markers[4])
s <- s + 2^3
}
if(k==1){
lb <- paste0(lb,', ',markers[5])
s <- s + 2^4
}
# if(grepl('^, ', lb)){
#   lb <- str_sub(lb, 3, str_length(lb))
# }
ls_clones[[paste0('Clone_',s)]] <- lb
}
}
}
}
}
clone_df <- data.frame(clone_desc=unlist(ls_clones), clone_id=names(ls_clones))
clone_df <- clone_df %>%
dplyr::filter(clone_id!='Clone_0')
clone_df$clone_desc <- gsub('^, ','',clone_df$clone_desc)
# View(clone_df)
clone_df <- clone_df[gtools::mixedsort(clone_df$clone_id),]
# data.table::fwrite(clone_df, meta_clones_fn)
# dim(meta_clones)
# View(head(meta_clones))
# data.table::fwrite(meta_clones, paste0(script_dir,'predefined_clones.csv'), quote=F)
# meta_clones <- data.table::fread(paste0(script_dir,'predefined_clones.csv')) %>% as.data.frame()
# dim(meta_clones)
# col <- colorRampPalette(brewer.pal(8, "Set2"))(dim(meta_clones)[1])
# names(col) <- meta_clones$clone_id
# meta_clones$cluster_color <- col  # just temporary colors, will change it later
clone_df$cluster_color <- get_color_clone(clone_df$clone_desc)
data.table::fwrite(clone_df, meta_clones_fn)
return(clone_df)
}
}
get_clone_label_v1 <- function(e, ts, v, td, k){
markers <- c('eBFP2','tSapphire','Venus','tdTomato','Katushka')
# vals <- c(0,1)
# ls_clones <- list()
lb <- ''
s <- 0
if(e==1){
lb <- paste0(lb, markers[1])
s <- s + 2^0
}
if(ts==1){
lb <- paste0(lb,', ',markers[2])
s <- s + 2^1
}
if(v==1){
lb <- paste0(lb,', ',markers[3])
s <- s + 2^2
}
if(td==1){
lb <- paste0(lb,', ',markers[4])
s <- s + 2^3
}
if(k==1){
lb <- paste0(lb,', ',markers[5])
s <- s + 2^4
}
if(grepl('^, ', lb)){
lb <- str_sub(lb, 3, str_length(lb))
}
if(s==0 & lb==''){
lb <- 'unlabeled'
}
res <- list(clone_label=paste0('Clone_',s),clone_desc=lb)
return(res)
}
viz_facs_imaging_summary_results <- function(){
script_dir <- '/Users/hoatran/Documents/jean_project/data/script/'
metaclone_df <- data.table::fread(paste0(script_dir,'predefined_clones_v2.csv')) %>% as.data.frame()
head(metaclone_df)
metaclone_df <- metaclone_df %>%
dplyr::select(-cluster_color)%>%
dplyr::rename(cluster_label=clone_id)
df <- df %>% inner_join(metaclone_df, by=c("cluster_label"))
data.table::fwrite(df, paste0(save_dir,'total_nodes_celltype_v3.csv'))
df1 <- df
df1 <- df %>%
dplyr::filter(!grepl('tdTomato',clone_desc))
cr <- cor(df1$FACS_counts, df1$imaging_counts, method = 'pearson')
cr
df$cluster_label
dim(df)
sum_images <- sum(df$imaging_counts)
metaclone_df <- metaclone_df %>%
dplyr::filter(clone_id %in% unique(df$cluster_label))
col <- metaclone_df$cluster_color
names(col) <- paste0(gsub('Clone_','',metaclone_df$clone_id),':',metaclone_df$clone_desc)
df$clone <- gsub('Clone_','',df$cluster_label)
# df <- df %>%
#   dplyr::mutate(pct_imaging=imaging_counts/sum_images)
df$clone_desc <- paste0(df$clone,':',df$clone_desc)
p <- ggplot(df,aes(x = FACS_counts, y = imaging_counts, color=clone_desc)) +
geom_point(size=5, alpha=0.6)+
scale_color_manual(values = col) +
annotate('text', x = df$FACS_counts, y = df$imaging_counts,
label = df$clone, size=2.5)+
theme_bw(base_size = 8) +
theme(legend.position = "bottom",
legend.text = element_text(size=5),
legend.box = "vertical",
panel.grid = element_blank()) +
guides(color = guide_legend(title="",
override.aes = list(size=1), ncol = 3))
p
png(paste0(save_dir,'vitro_celltypes_correlation_v1.png'),
height = 1100, width=750,res = 2*72)
print(p)
dev.off()
p <- ggplot(df,aes(x = FACS_Percent, y = pct_imaging, color=cluster_label)) +
geom_point()
data.table::fwrite(df, paste0(save_dir,'summary_facs_imaging_thrs_vol_200.csv'))
data.table::fwrite(df, paste0(save_dir,'summary_facs_imaging_thrs_vol_50.csv'))
}
script_dir <- '/Users/hoatran/Documents/python_workspace/TissueJ4Proteins/Rscript/'
input_dir <- '/Users/hoatran/Documents/python_workspace/TissueJ4Proteins/analysis/'
meta_clones_fn <- paste0(script_dir,'predefined_clones_v2.csv')
datatag <- 'MultiPDXs_Ms1134'
nodes_fn <- paste0(input_dir,datatag,'/cell_profiles.csv.gz')
save_dir <- paste0(input_dir,datatag,'/results/')
cell_profiles_fn <- paste0(save_dir,'filtered_cell_profiles.csv.gz')
xmax=27864
ymax=25920
# edges_fn <- paste0(input_dir,datatag,'/cell_interactions.csv.gz')
small_objs_area=50
meta_clones <- get_reference_clones(meta_clones_fn)
save_dir <- paste0(input_dir,'results/')
dir.create(save_dir)
nodes_df <- data.table::fread(nodes_fn) %>% as.data.frame()
print(dim(nodes_df))
# edges_df <- data.table::fread(edges_fn) %>% as.data.frame() ## To Do
# print(dim(edges_df))
if(small_objs_area>0){
print(paste0("Filtering very small objects with size smalller than ",small_objs_area))
print(dim(nodes_df)[1])
nodes_df <- nodes_df %>%
dplyr::filter(pixvol>small_objs_area)
print(dim(nodes_df)[1])
}
# edges_df <- data.table::fread(edges_fn) %>% as.data.frame() ## To Do
# print(dim(edges_df))
colnames(nodes_df)
if(small_objs_area>0){
print(paste0("Filtering very small objects with size smalller than ",small_objs_area))
print(dim(nodes_df)[1])
nodes_df <- nodes_df %>%
dplyr::filter(CellPixVol>small_objs_area)
print(dim(nodes_df)[1])
}
res <- get_celltype(nodes_df, edges_df, save_dir, datatag,
save_data=T, thres_vol_marker=0.2)
